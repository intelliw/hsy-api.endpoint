# [START swagger]
swagger: "2.0"
host: "api.sundaya.intelliweave.com"

# this section applies only if service is on the cloud.goog domain
# x-google-endpoints:
# - name: "echo-api.endpoints.sundaya.cloud.goog"
#   target: "104.199.146.74"  # host-api-static

# this section applies only if using Cloud Run for ESP (not tested successfully)
# x-google-backend: 
#   address: "https://api-host-s36x6mwuja-an.a.run.app"

x-google-allow: all

basePath: "/"
info:
  title: "Energy Management (API)"
  version: "0.2.20"
  description: |
    The Energy Management API provides energy accounting for four energy **Types**:

    `harvest`, `store`, `yield`, `buy`
    
    The `/energy` path provides energy data from monitored equipment for each period (*week*, *month* etc.) 
    
    API clients can use energy data to help users manage their energy **Assets**, and schedule energy use at preferred times. 
    
    The `/devices` path is for data collection from monitored equipment.
    
    Energy | Assets | Devices
    --- | --- | ---
    `harvest` | Renewables | PV Modules, Maximum Power Point Trackers (MPPT)
    `store` | Storage | Busbar Controllers (BBC), Pack Management Systems (PMS)
    `yield` | Appliances | Multicore-Cable Current Sensors, Switchboard Clamp Sensors
    `buy` | Grid | Smart Meters, PV Grid-interactive Inverters

    
  license:
    name: "Creative Commons Attribution 4.0 International"
    url: "http://creativecommons.org/licenses/by/4.0/"
  termsOfService: "https://sundaya.com/terms-of-service/"
# [END swagger]
schemes:
# Comment out if not supported
  - "https"
# - "http"
paths:
  "/api/versions":
    get:
      description: "Returns a list of versions which are still supported. Older versions may be requested through an `Accept` request header (see _Versions_ in [`Standards & Conventions`](https://docs.sundaya.intelliweave.com/docs/api.sundaya.intelliweave.com/0/c/Getting%20Started/Start%20Here/Standards%20&%20Conventions))."
      operationId: "admin.api.versions.get"
      security: []    # this path does not require an api key
      consumes:
      - ""
      produces:
      - "application/json"
      responses:
        "200":
          $ref: "#/responses/200-ok"
        "401":
          $ref: "#/responses/401-unauthorized"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Admin"
  "/api/logging":
    get:
      description: "Returns the current configuration for logging: including appenders, statements, and verbosity. Each environment is pre-configured (through enums.environments) but these configurations can be changed at runtime through this api path by specifying new options for 'appenders', 'statements' and 'verbosity'. For example developers will prefer to output logs to 'console' in the dev environment, while the test and prod environments will be configured to use 'stackdriver' with 'info' verbosity at startup but can be configured for 'debug' verbosity at runtime."
      operationId: "diagnostics.api.logging.get"
      security: []    # this path does not require an api key
      consumes:
      - ""
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/verbosity"  
      - $ref: "#/parameters/appenders"
      - $ref: "#/parameters/statements"
      responses:
        "200":
          $ref: "#/responses/200-ok"
        "401":
          $ref: "#/responses/401-unauthorized"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Admin"        
  "/api/features":
    get:
      description: "Returns the current configuration of features which can be toggled on and off."
      operationId: "diagnostics.api.features.get"
      security: []    # this path does not require an api key
      consumes:
      - ""
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/features-operational"  
      responses:
        "200":
          $ref: "#/responses/200-ok"
        "401":
          $ref: "#/responses/401-unauthorized"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Admin"        
  "/energy/{energy}/period/{period}/{epoch}/{duration}":
    get:
      description: "Retrieves energy monitoring data for a period. [Try this API](https://api.sundaya.intelliweave.com/energy/hsy/period/week/20150204/1?site=999)"
      operationId: "energy.period.epoch.duration.get"
      security: []    # this path does not require an api key
      consumes:
      - "application/json"
      produces:
      - "application/vnd.collection+json"
      - "application/json"
      - "text/html"
      - "text/plain"
      parameters:
      - $ref: "#/parameters/energy"  
      - $ref: "#/parameters/period"
      - $ref: "#/parameters/epoch"
      - $ref: "#/parameters/duration"
      - $ref: "#/parameters/site"
      - $ref: "#/parameters/product-catalogue-items"
      responses:
        "200":
          $ref: "#/responses/200-energy-data"
        "400":
          $ref: "#/responses/400-bad-request"
        "401":
          $ref: "#/responses/401-unauthorized"
        "404":
          $ref: "#/responses/404-not-found"
        "415":
          $ref: "#/responses/415-unsupported-media-type"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Energy" 
  "/devices/dataset/pms":
    post:
      description: "Logs monitoring data for the pack management system (PMS) including data for each cabinet and its battery packs."
      operationId: "devices.dataset.pms.post"
      consumes:
      - "application/json"
      - "text/csv"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/dataset-pms"
      responses:
        "200":
          $ref: "#/responses/200-ok"        
        "201":
          $ref: "#/responses/201-created"
        "400":
          $ref: "#/responses/400-bad-request"
        "401":
          $ref: "#/responses/401-unauthorized"
        "415":
          $ref: "#/responses/415-unsupported-media-type"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Devices"
  "/devices/dataset/mppt":
    post:
      description: "Logs monitoring data for Maximum Power Point Tracking (MPPT) charge controllers, including data for connected pv strings, batteries, and DC loads."
      operationId: "devices.dataset.mppt.post"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/dataset-mppt"
      responses:
        "200":
          $ref: "#/responses/200-ok"        
        "201":
          $ref: "#/responses/201-created"
        "400":
          $ref: "#/responses/400-bad-request"
        "401":
          $ref: "#/responses/401-unauthorized"
        "415":
          $ref: "#/responses/415-unsupported-media-type"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Devices"
  "/devices/dataset/inverter":
    post:
      description: "Logs monitoring data for Inverter charge controllers, including data for connected pv strings, batteries, and AC loads."
      operationId: "devices.dataset.inverter.post"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/dataset-inverter"
      responses:
        "200":
          $ref: "#/responses/200-ok"
        "201":
          $ref: "#/responses/201-created"
        "400":
          $ref: "#/responses/400-bad-request"
        "401":
          $ref: "#/responses/401-unauthorized"
        "415":
          $ref: "#/responses/415-unsupported-media-type"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Devices"
  "/device/{device-id}/dataset/{dataset}/period/{period}/{epoch}/{duration}":
    get:
      description: "Returns device data for a period. [Try this API](https://api.sundaya.intelliweave.com/device/CAB-01-001/dataset/pms)"
      operationId: "device.dataset.period.epoch.duration.get"
      consumes:
      - ""
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/device-id"
      - $ref: "#/parameters/dataset"
      - $ref: "#/parameters/period"
      - $ref: "#/parameters/epoch"
      - $ref: "#/parameters/duration"
      responses:
        "200":
          $ref: "#/responses/200-ok"
        "400":
          $ref: "#/responses/400-bad-request"
        "401":
          $ref: "#/responses/401-unauthorized"
        "404":
          $ref: "#/responses/404-not-found"
        "415":
          $ref: "#/responses/415-unsupported-media-type"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Devices"
  "/device/{device-id}/configs/period/{period}/{epoch}/{duration}":
    get:
      description: "Returns historical configuration data for a period, including identifiers of subitems such as battery assembly, MCU board, and Mosfet board. . [Try this API](https://api.sundaya.intelliweave.com/device/BBC-PR1202-999/configs/period)"
      operationId: "device.configs.period.get"
      consumes:
      - ""
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/device-id"
      - $ref: "#/parameters/period"
      - $ref: "#/parameters/epoch"
      - $ref: "#/parameters/duration"
      responses:
        "200":
          $ref: "#/responses/200-ok"
        "400":
          $ref: "#/responses/400-bad-request"
        "401":
          $ref: "#/responses/401-unauthorized"
        "404":
          $ref: "#/responses/404-not-found"
        "415":
          $ref: "#/responses/415-unsupported-media-type"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Devices"
parameters:
  appenders:  
    description: "A comma separated list of ouput appenders for error reporting and logged events. If a value is not specified the default ('stackdriver') is used."
    in: query
    name: "appenders"
    type: string
    default: "stackdriver"
    enum:
      - "stackdriver"
      - "console"
  dataset:  
    in: path
    name: "dataset"
    required: true
    description: "The type of dataset."
    type: string
    enum:
    - "pms"
    - "mppt"
    - "inverter"
  dataset-pms:
    description: "Data logged by the PMS for 4-48 packs inside 1-4 cabinets."
    in: body
    name: "datasets"
    required: true
    schema:
      description: "An array of PMS datasets."
      type: object
      properties:
        datasets:
          items:
            $ref: "#/definitions/pmsDataset"
          type: array
  dataset-mppt:
    description: "Data logged by a MPPT (DC) charge controller."
    in: body
    name: "datasets"
    required: true
    schema:
      description: "An array of MPPT charge controller datasets."
      type: object
      properties:
        datasets:
          items:
            $ref: "#/definitions/mpptDataset"
          type: array
  dataset-inverter:
    description: "Data logged by an Inverter (AC) charge controller."
    in: body
    name: "datasets"
    required: true
    schema:
      description: "An array of Inverter charge controller datasets."
      type: object
      properties:
        datasets:
          items:
            $ref: "#/definitions/inverterDataset"
          type: array
  device-id:
    description: "The device identifier."
    in: path
    name: "device-id"
    required: true
    type: string
  duration:
    description: "The number of periods to return starting at epoch. This defaults to 1."
    in: path
    name: "duration"
    required: true                # should be false but service deploy validation needs it to be true
    type: integer
    minimum: 1
  energy:
    description: "The type of energy flow."
    in: path
    name: "energy"
    required: true                # should be false but service deploy validation needs it to be true
    type: string
    default: "hsy"
    enum:
      - "hsy"
      - "harvest"
      - "store"
      - "yield"
      - "buy"
  epoch:
    description: "The start date and time of the period, in compressed `ISO 8601/RFC3339` (YYYYMMDDThhmmss±hhmm) and formatted according to the period."
    in: path
    name: "epoch"
    required: true                # should be false but service deploy validation needs it to be true
    type: string
    format: date-time
    default: "20190325"
  features-operational:  
    description: "A comma separated list of operational features which can be toggled. A feature is 'on' if it is present in the list. The 'validation' feature determines whether or not to to perform in-depth input validation for POST requests"
    in: query
    name: "operational"
    type: string
    default: "logging"
    enum:
      - "none"
      - "logging"
      - "validation"
  period:
    description: "The time window for which total energy is aggregated. The only exception is 'instant' which measures energy at a single point in time, without aggregation."
    in: path
    name: "period"
    required: true                # should be false but service deploy validation needs it to be true  
    type: string
    default: "week"
    enum:
      - "instant"
      - "second"
      - "minute"
      - "hour"
      - "timeofday"
      - "day"
      - "week"
      - "month"
      - "quarter"
      - "year"
      - "fiveyear"
  product-catalogue-items:
    description: "An optional product filter to restrict data to specific categories, subcategories and product types."
    in: body
    name: "productCatalogueItems"
    schema:
      description: "A list of product catalogue items to filter the energy data query."
      type: object
      properties:
        productCatalogueItems:
          items:
            $ref: '#/definitions/productCatalogueItem'
          type: array
  statements:  
    description: "A comma separated list of logging statements which are to be included in logs. For example if this list contains 'messaging' all statements in the code for log.messaging will be written to logs, otherwise they will be silent. The 'messaging' predicate refers to log statements for message broker functions; 'data' refers to data access functions; 'trace' provides a mechanism for diagnosing code paths and execution sequences through critical sections."
    in: query
    name: "statements"
    type: string
    default: "messaging,exception"
    enum:
      - "data"
      - "error"
      - "exception"
      - "messaging"
      - "trace"
  site:  
    description: "The customer site where energy assets are installed."
    in: query
    name: "site"
    required: true
    type: string
  verbosity:  
    description: "A comma separated list of log levels, for error reporting and logged events. If a value is not specified the minmum verbosity of ('info') is used as the default. 'debug' logs the full payload of POST requests and can be made active for short troubleshooting periods."
    in: query
    name: "verbosity"
    type: string
    default: "info"
    enum:
      - "none"
      - "info"
      - "debug"
responses:
  200-ok:
    description: "Data retrieved, or queued for processing."
    schema:
      $ref: "#/definitions/genericMessage"
  200-energy-data:
    description: "Energy data items collection."
    schema:
      type: object
      properties:
        collection:
          $ref: "#/definitions/collection"
  201-created:
    description: "Resource created."
    schema:
      $ref: "#/definitions/genericMessage"
    headers:
      Location:
        description: "One or more [Location](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30) headers provide links back to the created resource."
        type: string
  400-bad-request:
    description: "The client specified an invalid argument."
    schema:
      $ref: "#/definitions/genericMessage"
  401-unauthorized:
    description: "The client does not have sufficient permission."
    schema:
      $ref: "#/definitions/genericMessage"
  404-not-found:
    description: "The resource was not found."
    schema:
      $ref: "#/definitions/genericMessage"
  415-unsupported-media-type:
    description: "The requested Accept header type is not supported."
    schema:
      $ref: "#/definitions/genericMessage"
  500-internal-server-error:
    description: "The server encountered an unexpected condition."
    schema:
      $ref: "#/definitions/genericMessage"
definitions:
  collection:
    description: "A Collection+JSON message consisting of Items and Data."
    type: object
    required:
    - "version"
    - "href"
    - "links"
    - "items"
    properties:
      version:
        type: string
      href:
        type: string
      links:
        $ref: "#/definitions/collectionLinks"
      items:
        $ref: "#/definitions/collectionItems"
  collectionItems:
    description: "Items container for Links and Data in a Collection+JSON message."
    type: array
    items:
      type: object
      required:
      - "href"
      - "links"
      - "data"
      properties:
        href:
          type: string
        links:
          $ref: "#/definitions/collectionLinks"
        data:
          $ref: "#/definitions/collectionData"    
  collectionData:
    description: "Top level Data in a Collection+JSON message."
    type: array
    items:
      type: object
      required:
      - "name"
      - "value"
      - "data"
      properties:
        name:
          type: string
        value:
          type: string
        data:
          $ref: "#/definitions/collectionDataDetail"
  collectionDataDetail:
    description: "Second level Data in a Collection+JSON message. Muliple space separated string values can be provided in the 'value' attribute, e.g. '13.446 12.530 16.989 12.326'."
    type: array
    items:
      type: object
      required:
      - "name"
      - "value"
      properties:
        name:
          type: string
        value:
          type: string
  collectionLinks:
    description: "Links in a Collection+JSON message."
    type: array
    items:
      type: object
      required:
      - "rel"
      - "name"
      - "prompt"
      - "title"
      - "href"
      - "render"
      properties:
        rel:
          type: string
        name:
          type: string
        prompt:
          type: string
        title:
          type: string
        href:
          type: string
        render:
          type: string
  equipmentStatus:
    description: "A 4-character, hex-encoded string value corresponding to a bitmap of equipment status fields."
    type: string
    minLength: 4
    maxLength: 4
  eventTime:
    description: "The local time of the event which produced this data sample, represented with a mandatory '+/-' offset from UTC for the device's location, in compressed 'ISO 8601/RFC3339' (YYYYMMDDThhmmss±hhmm)."
    type: string
    format: date-time                      
  genericMessage:
    description: "Code and status with message details."
    type: object
    required:
    - "status"
    - "message"
    - "details"
    properties:
      status:
        description: "The response or error status code."
        type: string
        example: "400"
      message:
        description: "The summary description of the response or error."
        type: string
        example: "Illegal input for operation."
      details:
        type: array
        items:
          $ref: "#/definitions/genericMesssageDetail"
  genericMesssageDetail:
    description: "Message details provide additional information about a message target."
    type: object
    required:
    - "message"
    - "target"
    properties:
      message:
        description: "The message text describing an error or response condition for the target."
        type: string
        example: "NullValue"
      target:
        description: "The target of the detail message."
        type: string
        example: "period parameter"
  inverterDataset:
    description: "Contains data for an Inverter controller and its connected pv strings, batteries, and AC loads."
    type: object
    required:
    - "inverter_id"
    - "status"
    - "data"      
    properties:
      inverter_id:
        description: "The device identifier."
        type: string
      status:
        description: "Attributes in the `status` element provide a secondary dataset, as opposed to the `data` element which which provides the primary dataset for the actual equipment being monitored."
        type: object
        required:
        - "code"
        properties:
          code:
            $ref: "#/definitions/equipmentStatus"
      data:
        $ref: "#/definitions/inverterData"
  inverterData:
    description: "Data readings from devices connected to a charge controller, taken at the same event time."
    type: array
    items:
      type: object
      required:
      - "time_local"
      - "pv"
      - "battery"
      - "load"
      - "grid"
      properties:
        time_local:
          $ref: "#/definitions/eventTime"
        pv:
          $ref: "#/definitions/pv"
        battery:
          $ref: "#/definitions/battery"
        load:
          $ref: "#/definitions/load"
        grid:
          $ref: "#/definitions/grid"
  pmsDataset:
    description: "Data for a 1-4 cabinets, containing packs, cell blocks, and mosfets."
    type: object
    required:
    - "pms_id"
    - "status"
    - "data"      
    properties:
      pms_id:
        description: "The device identifier."
        type: string
      status:
        description: "Attributes in the `status` element provide a secondary dataset, as opposed to the `data` element which which provides the primary dataset for the actual equipment being monitored (`pack` data)."
        type: object
        required:
        - "code"
        - "temp"
        properties:
          code:
            $ref: "#/definitions/equipmentStatus"
          temp:
            description: "The Ehub's self-monitored temperature."
            type: number
            format: float
            minimum: 0
            example: "48.3"            
      data:
        $ref: "#/definitions/pmsData"
  pmsData:
    description: "Data from packs installed in 1-4 cabinets."
    type: array
    items:
      type: object
      required:
      - "time_local"
      - "pack"
      properties:
        time_local:
          $ref: "#/definitions/eventTime"
        pack:
          description: "The datapoints for a pack."
          type: object
          required:
          - "id"
          - "dock"
          - "amps"
          - "temp"
          - "cell"
          - "fet"
          properties:
            id:
              description: "The pack identifier. The value is provided by the pack’s acquisition board."
              type: string
              example: "NullValue"
            dock:
              description: "The dock number (1 - 48) into which this pack is installed. The dock number sequence covers 4 cabinets with 12 docks per cabinet."
              type: integer
              minimum: 1
              maximum: 48
              example: 12
            amps:
              description: "The current draw from this pack. The value is positive for charge current and negative when discharging."
              type: number
              format: float
              example: "-1.05"
            temp:
              description: "An ordered set of 3 temperature readings in degC, for the temperature of the cell-pack at its top, middle, and bottom."
              type: array
              minItems: 3
              maxItems: 3
              items:
                type: number
                format: float
                minimum: 0
                example: "35.0"
            cell:
              description: "Data for 14 cellblocks inside this pack."
              type: object
              required:
              - "volts"
              - "open"
              properties:
                volts:
                  description: "An ordered set of 14 Voltage readings for 14 cellblocks in the pack. The cellblocks are connected in series and the pack voltage is the sum of all 14 cell voltages."
                  type: array
                  minItems: 14
                  maxItems: 14
                  items:
                    type: number
                    format: float
                    minimum: 0
                    example: "3.92"
                open:
                  description: "An unordered set of ordinals for cells which are ‘open’ due to cell balancing. Must contain numbers from 1-14 as there are only 14 cells in a pack."
                  type: array
                  minItems: 0
                  maxItems: 14
                  uniqueItems: true
                  items:
                    type: integer
                    minimum: 1
                    maximum: 14
                    example: "[1,6]"
            fet:
              description: "Data readings for input (CMOS) and output (DMOS) MOSFETS."
              type: object
              required:
              - "temp"
              - "open"
              properties:
                temp:
                  description: "An ordered set of temperature readings for the two MOSFETS in this pack. The first is the input (CMOS) and the 2nd is the output (DMOS) MOSFET."
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    type: number
                    format: float
                    minimum: 0
                    example: "34.1"
                open:
                  description: "An unordered set ordinal values for FET numbers which are ‘open’ due to pack balancing. The data values must be a number from 1-2 as there are only 2 FETS in each pack."
                  type: array
                  minItems: 0
                  maxItems: 2
                  uniqueItems: true
                  items:
                    type: integer
                    minimum: 1
                    maximum: 2
                    example: "[1,2]"
  mpptDataset:
    description: "Contains data for a MPPT charge controller and its connected pv strings, batteries, and DC loads."
    type: object
    required:
    - "mppt_id"
    - "status"
    - "data"      
    properties:
      mppt_id:
        description: "The device identifier."
        type: string
      status:
        description: "Attributes in the `status` element provide a secondary dataset, as opposed to the `data` element which which provides the primary dataset for the actual equipment being monitored."
        type: object
        required:
        - "code"
        properties:
          code:
            $ref: "#/definitions/equipmentStatus"
      data:
        $ref: "#/definitions/mpptData"
  mpptData:
    description: "Data readings from devices connected to a charge controller, taken at the same event time."
    type: array
    items:
      type: object
      required:
      - "time_local"
      - "pv"
      - "battery"
      - "load"
      properties:
        time_local:
          $ref: "#/definitions/eventTime"
        pv:
          $ref: "#/definitions/pv"
        battery:
          $ref: "#/definitions/battery"
        load:
          $ref: "#/definitions/load"
  productCatalogueItem:
    description: "A product catalogue item definition."
    type: object
    required:
    - "productCategory"
    - "productSubcategory"
    - "productType"
    properties:
      productCategory:
        description: "A valid product Category."
        type: string
        example: "Solutions"
        enum:
        - "Components"
        - "Solutions"
        - "Solutions & Components"
      productSubcategory:
        description: "A valid Subcategory for the provided product Category."
        type: string
        example: "Solar Home Kits"
        enum:
        - "Harvest"
        - "Counting"
        - "Replacing"
        - "Solar Home Kits"
        - "Saving & Yield"   
      productType:
        description: "A valid product Type for the product Category and Subcategory."
        type: string
        example: "JouleBox"
        enum:
        - "Electricity Meter"
        - "LED Lighting"
        - "Air Conditioning"
        - "Industrial PV"
        - "Residential PV"
        - "Home Battery"
        - "Ulitium"
        - "JouleBox"
        - "PV Solar Panel"                  
  temperature:
    description: "Temperature in degrees Centigrade."
    type: number
    format: float
    minimum: 0
    example: "34.0"
  battery:
    description: "A data subset for a connected battery system."
    type: object
    required:
    - "volts"
    - "amps"
    properties:
      volts:
        description: "Voltage reading for the connected battery."
        type: number
        format: float
        minimum: 0        
        example: "55.1"
      amps:
        description: "The current for the connected Battery. The value is positive for charge current and negative when discharging."
        type: number
        format: float
        example: "-1.601"
  load:
    description: "A data subset for a connected Loads connected to a controller."
    type: object
    required:
    - "volts"
    - "amps"
    properties:
      volts:
        description: "An ordered set of Voltage readings for Loads connected to this controller. Presently upto 2 loads per controller are supported."
        type: array
        minItems: 1
        maxItems: 2
        items:
          type: number
          format: float
          minimum: 0
          example: "48.000"
      amps:
        description: "An ordered set of Current readings for Loads (corresponding to voltage readings in 'load.volts'. Load amps are always negative."
        type: array
        minItems: 1
        maxItems: 2
        items:
          type: number
          format: float
          maximum: 0
          example: "1.02"
  grid:
    description: "A data subset for the connected grid supply."
    type: object
    required:
    - "volts"
    - "amps"
    - "pf"
    properties:
      volts:
        description: "An ordered set of up to 3 Voltage readings for each phase of the connected grid supply."
        type: array
        minItems: 1
        maxItems: 3
        items:
          type: number
          format: float
          minimum: 0
          example: "48.000"
      amps:
        description: "An ordered set of Current readings for for each phase of the connected grid supply (corresponding to values in grid.volts and grid.pf)."
        type: array
        minItems: 1
        maxItems: 3
        items:
          type: number
          format: float
          example: "1.02"
      pf:
        description: "An ordered set of Power Factor readings for each phase of the connected grid supply (corresponding to values in grid.volts and grid.amps)."
        type: array
        minItems: 1
        maxItems: 3
        items:
          type: number
          format: float
          minimum: -1
          maximum: 1
          example: "0.92"          
  pv:
    description: "A data subset for a PV string."
    type: object
    required:
    - "volts"
    - "amps"
    properties:
      volts:
        description: "An ordered set of Voltage readings for PV strings connected to this controller. Presently upto 4 PV strings per controller are supported."
        type: array
        minItems: 1
        maxItems: 4
        items:
          type: number
          format: float
          minimum: 0
          example: "48.000"
      amps:
        description: "An ordered set of Current readings for PV strings (corresponding to voltage readings in 'pv.volts'. PV amps are always positive."
        type: array
        minItems: 1
        maxItems: 4
        minimum: 0
        items:
          type: number
          format: float
          example: "6.01"
# This section requires all requests to any path to require an API key UNLESS there is a declaration in the path operation
# cloud endpoints: security definition must reference at least one SecurityDefinition of type : 'apiKey'
# regardless of api key definitions here, ESP requires the following: 
#     query parameter must be sent in 'api_key', if header is used it must be x-api-key 
# security: [] removes key restriction for an operation or globally
# [START securityDef]
security: 
- api_key: []  
securityDefinitions:
  # cloud endpoints: types must be apiKey. Only apiKey with 'name' as 'key' and 'in' as 'query' are supported
  api_key:
    type: "apiKey"
    name: "key"
    in: "header"
  # this does nothing - not needed see note above
  x-api-key:
    type: "apiKey"
    name: "key"
    in: "header"    
# [END securityDef]
  # This section configures authentication using Google API Service Accounts
  # to sign a json web token. This is mostly used for server-to-server
  # communication.
  google_jwt:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    # This must match the 'iss' field in the JWT.
    x-google-issuer: "jwt-client.endpoints.sample.google.com"
    # Update this with your service account's email address.
    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/jwk/YOUR-SERVICE-ACCOUNT-EMAIL"
    # This must match the "aud" field in the JWT. You can add multiple audiences to accept JWTs from multiple clients.
    x-google-audiences: "echo.endpoints.sample.google.com"
  # This section configures authentication using Google App Engine default
  # service account to sign a json web token. This is mostly used for
  # server-to-server communication.
  gae_default_service_account:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    # Replace YOUR-CLIENT-PROJECT-ID with your client project ID.
    x-google-issuer: "YOUR-CLIENT-PROJECT-ID@appspot.gserviceaccount.com"
    # Replace YOUR-CLIENT-PROJECT-ID with your client project ID.
    x-google-jwks_uri: "https://www.googleapis.com/robot/v1/metadata/x509/YOUR-CLIENT-PROJECT-ID@appspot.gserviceaccount.com"
    # This must match the "aud" field in the JWT. You can add multiple audiences to accept JWTs from multiple clients.
    x-google-audiences: "echo.endpoints.sample.google.com"
  # This section configures authentication using a service account
  # to sign a json web token. This is mostly used for server-to-server
  # communication.
  google_service_account:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    # Replace YOUR-SERVICE-ACCOUNT-EMAIL with your service account email.
    x-google-issuer: "YOUR-SERVICE-ACCOUNT-EMAIL"
    # Replace YOUR-SERVICE-ACCOUNT-EMAIL with your service account email.
    x-google-jwks_uri: "https://www.googleapis.com/robot/v1/metadata/x509/YOUR-SERVICE-ACCOUNT-EMAIL"
    # This must match the "aud" field in the JWT. You can add multiple audiences to accept JWTs from multiple clients.
    x-google-audiences: "echo.endpoints.sample.google.com"
  # This section configures authentication using Google OAuth2 ID Tokens.
  # ID Tokens can be obtained using OAuth2 clients, and can be used to access
  # your API on behalf of a particular user.
  google_id_token:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "https://accounts.google.com"
    x-google-jwks_uri: "https://www.googleapis.com/oauth2/v3/certs"
    # Your OAuth2 client's Client ID must be added here. You can add multiple client IDs to accept tokens form multiple clients.
    x-google-audiences: "YOUR-CLIENT-ID"
  # This section configures authentication using Firebase Auth.
  # [START firebaseAuth]
  firebase:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "https://securetoken.google.com/YOUR-PROJECT-ID"
    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com"
    x-google-audiences: "YOUR-PROJECT-ID"
  # [END firebaseAuth]